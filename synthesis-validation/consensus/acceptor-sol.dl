.decl aState(x0:symbol,x1:number,x2:number,x3:number,x4:number)
.decl receive_1a(x0:number,x1:number)
.decl receive_2a(x0:number,x1:number,x2:number)
.decl new_aState(x0:symbol,x1:number,x2:number,x3:number,x4:number)
.decl send_2b(x0:number,x1:symbol,x2:number,x3:number)
.decl send_1b(x0:number,x1:symbol,x2:number,x3:number,x4:number)
.input aState
.input receive_1a
.input receive_2a
new_aState(node0,ballot0,ballot0,value0,instanceid0) :- receive_2a(ballot0,value0,instanceid0),aState(node0,ballot0,_,_,instanceid0).
new_aState(node0,ballot2,ballot1,value0,instanceid0) :- aState(node0,ballot0,ballot1,value0,instanceid0),receive_1a(ballot2,instanceid0),ballot2 > ballot0.
send_2b(ballot0,node0,value0,instanceid0) :- receive_2a(ballot0,value0,instanceid0),aState(node0,ballot0,_,_,instanceid0).
send_1b(ballot2,node0,ballot0,value0,instanceid0) :- aState(node0,ballot0,_,value0,instanceid0),receive_1a(ballot2,instanceid0),ballot2 > ballot0.
.output new_aState
.output send_2b
.output send_1b